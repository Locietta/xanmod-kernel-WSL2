From 344d127579d402cba449e171bdf2f2e5938bb572 Mon Sep 17 00:00:00 2001
From: Locietta <locietta@gmail.com>
Date: Sun, 4 May 2025 14:20:50 +0800
Subject: [PATCH] include/linux/typecheck.h: zero init dummy vars for clang

A new on by default warning in clang [1] aims to flags instances where
const variables without static or thread local storage are not
initialized because it can lead to an indeterminate value. The __dummy
variables in the typecheck() macro are the only places within the kernel
where this warning currently occurs.

Link: https://github.com/llvm/llvm-project/commit/576161cb6069e2c7656a8ef53=
0727a0f4aefff30 [1]

Original: https://patchew.org/linux/20250501-default-const-init-clang-v1-2-3d2c6c185dbb@kernel.org/mbox

Signed-off-by: Locietta <locietta@gmail.com>
---
 include/linux/typecheck.h | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/include/linux/typecheck.h b/include/linux/typecheck.h
index 46b15e2aa..ddc5ee8f1 100644
--- a/include/linux/typecheck.h
+++ b/include/linux/typecheck.h
@@ -7,8 +7,8 @@
  * Always evaluates to 1 so you may use it easily in comparisons.
  */
 #define typecheck(type,x) \
-({	type __dummy; \
-	typeof(x) __dummy2; \
+({	type __dummy = {}; \
+	typeof(x) __dummy2 = {}; \
 	(void)(&__dummy == &__dummy2); \
 	1; \
 })
@@ -26,7 +26,7 @@
  * Check at compile time that something is a pointer type.
  */
 #define typecheck_pointer(x) \
-({	typeof(x) __dummy; \
+({	typeof(x) __dummy = {}; \
 	(void)sizeof(*__dummy); \
 	1; \
 })
-- 
2.49.0

