name: Kernel CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    # manual trigger
  schedule:
    - cron: '0 6,14,22 * * *'

jobs:
  build:
    runs-on: ubuntu-latest
    container: locietta/loia-dev-base:latest
    outputs:
      current_version: ${{ steps.out.outputs.current_version }}
      release_version: ${{ steps.out.outputs.release_version }}
      clang_version:   ${{ steps.out.outputs.clang_version }}
    
    strategy: 
      matrix:
        include:
          - arch: GENERIC_CPU2
            image-name: bzImage-old
          - arch: GENERIC_CPU3
            image-name: bzImage
          - arch: MSKYLAKE
            image-name: bzImage-skylake

    steps:
    - name: Trust this directory
      run: git config --global --add safe.directory /__w/xanmod-kernel-WSL2/xanmod-kernel-WSL2 # v2.35.2 or later
      # run: GIT_CEILING_DIRECTORIES=/__w # don't work

    - uses: actions/checkout@main
    
    - name: Install dependencies
      id: dep
      run: |
        pacman -S --noconfirm pahole xmlto inetutils bc cpio jq
    
    - name: Prepare source code
      run: |
        git clone https://github.com/xanmod/linux.git --depth 1 linux
        cd linux && ../config.sh
        scripts/config -e ${{ matrix.arch }}
        # Load version info into env
        echo "CLANG_VERSION=$(pacman -Qs clang | grep local/clang | sed "s#.*local/clang \(.*\)#\1#")" | tee -a $GITHUB_ENV
        echo "CURRENT_VERSION=$(make kernelrelease)" | tee -a $GITHUB_ENV
        
        export RELEASED_TAG=$(curl -sL -H 'Authorization: token ${{ secrets.CUSTOM_GITHUB_TOKEN }}'\
          https://api.github.com/repos/Locietta/xanmod-kernel-WSL2/releases/latest | jq -r '.tag_name')
        
        echo "RELEASED_VERSION=$(echo $RELEASED_TAG | sed "s#\(.*-locietta-WSL2-xanmod[0-9][0-9]*\).*#\1#" )" | tee -a $GITHUB_ENV

    - name: Build kernel
      if: ${{ env.CURRENT_VERSION != env.RELEASED_VERSION || github.event_name == 'pull_request' }}
      run: |
        cd linux && ../build.sh
        mv arch/x86/boot/bzImage ../${{ matrix.image-name }}
        cd .. && sha256sum ${{ matrix.image-name }} > ${{ matrix.image-name }}.sha256

    - name: Upload bzImage
      uses: actions/upload-artifact@v3
      if: ${{ env.CURRENT_VERSION != env.RELEASED_VERSION || github.event_name == 'pull_request' }}
      with:
        name: ${{ matrix.image-name }}
        path: |
          ${{ matrix.image-name }}
          ${{ matrix.image-name }}.sha256

    - id: out
      run: |
        echo "current_version=${{ env.CURRENT_VERSION }}" >> $GITHUB_OUTPUT
        echo "release_version=${{ env.RELEASED_VERSION }}" >> $GITHUB_OUTPUT
        echo "clang_version=${{ env.CLANG_VERSION }}" >> $GITHUB_OUTPUT

  release:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - uses: actions/checkout@main
    - uses: actions/download-artifact@v3
      with:
        path: release_images/

    - id: fetch_commit_sha
      run: |
        if [ ${{ github.event_name == 'pull_request' }} ]; then
          echo "sha=${{ github.event.pull_request.head.sha }}" >> $GITHUB_OUTPUT
          echo "RELEASE_TAG=${{ needs.build.outputs.current_version }}.1-PR" | tee -a $GITHUB_ENV
        else 
          echo "sha=${{ github.sha }}" >> $GITHUB_OUTPUT
          echo "RELEASE_TAG=${{ needs.build.outputs.current_version }}.1" | tee -a $GITHUB_ENV
        fi

    - name: Release
      uses: softprops/action-gh-release@v1
      if: ${{ needs.build.outputs.current_version != needs.build.outputs.release_version }} || github.event_name == 'pull_request'
      with:
        name:  ${{ env.RELEASE_TAG }}
        tag_name:  ${{ env.RELEASE_TAG }}
        draft: ${{ github.event_name == 'pull_request' }}
        target_commitish: ${{ steps.fetch_commit_sha.outputs.sha }} 
        body: |
          Cutting edge XanMod kernel for WSL2, built with Clang ${{ needs.build.outputs.clang_version }} shipped by Arch Linux.
          Provide builds on different archs with matrix build utility of GitHub Action.

          * `bzImage` for generic-x86_64-v3
          * `bzImage-old` for generic-x86_64-v2
          * `bzImage-skylake` for intel skylake

          To check supported x86_64 level on your machine, see [how to check supported x86_64 level of the hardware](https://unix.stackexchange.com/questions/631217/how-do-i-check-if-my-cpu-supports-x86-64-v2?msclkid=42ca61e9aa7111ecbcab7bb1a4204357).
          And if you happen to use intel skylake chips (just like me), you can choose `bzImage-skylake` for best tuning.

          **NOTE for Win11**: the minimum requirement of Win11 ensures generic-x86_64-v3 support, so feel free to use `bzImage`.
          
        files: |
          release_images/*/*
        token: ${{ secrets.CUSTOM_GITHUB_TOKEN }}
        # generate_release_notes: true
        fail_on_unmatched_files: true